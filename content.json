[{"title":"自我总结Vue面试题","date":"2020-04-13T16:00:00.000Z","path":"2020/04/14/my-first-article/","text":"总结Vue面试题一.vue.js响应式数据的原理？1.核心点：object.defineProperty2. 默认Vue在初始化数据时，会给data中的属性使用Object.defineProperty重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。二.computed，watch，method有什么区别？1.computed与watch比较，computed和watch都通过watcher方法进行监听，但computed具备缓存的功能，在页面刷新或切换组件时，会减少数据的重复调用，页面的渲染，节省性能。2.computed与method比较，computed比method的优势在于具备数据缓存功能，在提高性能方面computed比method好。三.ajax请求放在哪个生命周期中1.在created的时候，视图中的dom并没有渲染出来，所以此时如果直接去操dom节点，无法找到相关的元素。2.在mounted中，由于此时dom已经渲染出来了，所以可以直接操作dom节点。一般情况下都放到mounted中,保证逻辑的统一性,因为生命周期是同步执行的，ajax是异步执行的。四.何时需要使用beforeDestrop1.当前页面使用了$on方法，需要在组件销毁前解绑。2.清除自己定义的定时器。3.解除事件绑定 scroll mousemove……五.为什么v-for和v-if不能连着用？v-for会比v-if优先级高一些，如果连着用的话会把v-if的每个元素都添加一下，会造成性能问题。不想把v-for放外层，想连着用就可以使用计算属性。六.用vnode描述一下DOM结构会将template =&gt; ast树 =&gt; codegen =&gt; render函数 =&gt; 内部调用的就是_c方法 =&gt; 虚拟dom总结：将template模板转化成虚拟dom。七.组件中的data为什么是一个函数？1.同一个组件被复用多次，会创建多个实例。2.这些实例用的是同一个构造函数，如果data是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过data函数返回一个对象作为组件的状态。八.Vue中v-html会有哪些问题？1.可能会导致xss攻击。2.v-html会替换掉标签内子元素。**####","content":"<h2 id=\"总结Vue面试题\"><a href=\"#总结Vue面试题\" class=\"headerlink\" title=\"总结Vue面试题\"></a>总结Vue面试题</h2><h3 id=\"一-vue-js响应式数据的原理？\"><a href=\"#一-vue-js响应式数据的原理？\" class=\"headerlink\" title=\"一.vue.js响应式数据的原理？\"></a><strong>一.vue.js响应式数据的原理？</strong></h3><h4 id=\"1-核心点：object-defineProperty\"><a href=\"#1-核心点：object-defineProperty\" class=\"headerlink\" title=\"1.核心点：object.defineProperty\"></a>1.核心点：object.defineProperty</h4><h4 id=\"2-默认Vue在初始化数据时，会给data中的属性使用Object-defineProperty重新定义所有属性-当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher）-如果属性发生变化会通知相关依赖进行更新操作。\"><a href=\"#2-默认Vue在初始化数据时，会给data中的属性使用Object-defineProperty重新定义所有属性-当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher）-如果属性发生变化会通知相关依赖进行更新操作。\" class=\"headerlink\" title=\"2. 默认Vue在初始化数据时，会给data中的属性使用Object.defineProperty重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。\"></a>2. 默认Vue在初始化数据时，会给data中的属性使用Object.defineProperty重新定义所有属性,当页面取到对应属性时。会进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖进行更新操作。</h4><h3 id=\"二-computed，watch，method有什么区别？\"><a href=\"#二-computed，watch，method有什么区别？\" class=\"headerlink\" title=\"二.computed，watch，method有什么区别？\"></a><strong>二.computed，watch，method有什么区别？</strong></h3><h4 id=\"1-computed与watch比较，computed和watch都通过watcher方法进行监听，但computed具备缓存的功能，在页面刷新或切换组件时，会减少数据的重复调用，页面的渲染，节省性能。\"><a href=\"#1-computed与watch比较，computed和watch都通过watcher方法进行监听，但computed具备缓存的功能，在页面刷新或切换组件时，会减少数据的重复调用，页面的渲染，节省性能。\" class=\"headerlink\" title=\"1.computed与watch比较，computed和watch都通过watcher方法进行监听，但computed具备缓存的功能，在页面刷新或切换组件时，会减少数据的重复调用，页面的渲染，节省性能。\"></a>1.computed与watch比较，computed和watch都通过watcher方法进行监听，但computed具备缓存的功能，在页面刷新或切换组件时，会减少数据的重复调用，页面的渲染，节省性能。</h4><h4 id=\"2-computed与method比较，computed比method的优势在于具备数据缓存功能，在提高性能方面computed比method好。\"><a href=\"#2-computed与method比较，computed比method的优势在于具备数据缓存功能，在提高性能方面computed比method好。\" class=\"headerlink\" title=\"2.computed与method比较，computed比method的优势在于具备数据缓存功能，在提高性能方面computed比method好。\"></a>2.computed与method比较，computed比method的优势在于具备数据缓存功能，在提高性能方面computed比method好。</h4><h3 id=\"三-ajax请求放在哪个生命周期中\"><a href=\"#三-ajax请求放在哪个生命周期中\" class=\"headerlink\" title=\"三.ajax请求放在哪个生命周期中\"></a><em>三.ajax请求放在哪个生命周期中</em></h3><h4 id=\"1-在created的时候，视图中的dom并没有渲染出来，所以此时如果直接去操dom节点，无法找到相关的元素。\"><a href=\"#1-在created的时候，视图中的dom并没有渲染出来，所以此时如果直接去操dom节点，无法找到相关的元素。\" class=\"headerlink\" title=\"1.在created的时候，视图中的dom并没有渲染出来，所以此时如果直接去操dom节点，无法找到相关的元素。\"></a>1.在created的时候，视图中的dom并没有渲染出来，所以此时如果直接去操dom节点，无法找到相关的元素。</h4><h4 id=\"2-在mounted中，由于此时dom已经渲染出来了，所以可以直接操作dom节点。\"><a href=\"#2-在mounted中，由于此时dom已经渲染出来了，所以可以直接操作dom节点。\" class=\"headerlink\" title=\"2.在mounted中，由于此时dom已经渲染出来了，所以可以直接操作dom节点。\"></a>2.在mounted中，由于此时dom已经渲染出来了，所以可以直接操作dom节点。</h4><h4 id=\"一般情况下都放到mounted中-保证逻辑的统一性-因为生命周期是同步执行的，ajax是异步执行的。\"><a href=\"#一般情况下都放到mounted中-保证逻辑的统一性-因为生命周期是同步执行的，ajax是异步执行的。\" class=\"headerlink\" title=\"一般情况下都放到mounted中,保证逻辑的统一性,因为生命周期是同步执行的，ajax是异步执行的。\"></a>一般情况下都放到mounted中,保证逻辑的统一性,因为生命周期是同步执行的，ajax是异步执行的。</h4><h3 id=\"四-何时需要使用beforeDestrop\"><a href=\"#四-何时需要使用beforeDestrop\" class=\"headerlink\" title=\"四.何时需要使用beforeDestrop\"></a><em>四.何时需要使用beforeDestrop</em></h3><h4 id=\"1-当前页面使用了-on方法，需要在组件销毁前解绑。\"><a href=\"#1-当前页面使用了-on方法，需要在组件销毁前解绑。\" class=\"headerlink\" title=\"1.当前页面使用了$on方法，需要在组件销毁前解绑。\"></a>1.当前页面使用了$on方法，需要在组件销毁前解绑。</h4><h4 id=\"2-清除自己定义的定时器。\"><a href=\"#2-清除自己定义的定时器。\" class=\"headerlink\" title=\"2.清除自己定义的定时器。\"></a>2.清除自己定义的定时器。</h4><h4 id=\"3-解除事件绑定-scroll-mousemove……\"><a href=\"#3-解除事件绑定-scroll-mousemove……\" class=\"headerlink\" title=\"3.解除事件绑定 scroll  mousemove……\"></a>3.解除事件绑定 scroll  mousemove……</h4><h3 id=\"五-为什么v-for和v-if不能连着用？\"><a href=\"#五-为什么v-for和v-if不能连着用？\" class=\"headerlink\" title=\"五.为什么v-for和v-if不能连着用？\"></a><em>五.为什么v-for和v-if不能连着用？</em></h3><h4 id=\"v-for会比v-if优先级高一些，如果连着用的话会把v-if的每个元素都添加一下，会造成性能问题。\"><a href=\"#v-for会比v-if优先级高一些，如果连着用的话会把v-if的每个元素都添加一下，会造成性能问题。\" class=\"headerlink\" title=\"v-for会比v-if优先级高一些，如果连着用的话会把v-if的每个元素都添加一下，会造成性能问题。\"></a>v-for会比v-if优先级高一些，如果连着用的话会把v-if的每个元素都添加一下，会造成性能问题。</h4><h4 id=\"不想把v-for放外层，想连着用就可以使用计算属性。\"><a href=\"#不想把v-for放外层，想连着用就可以使用计算属性。\" class=\"headerlink\" title=\"不想把v-for放外层，想连着用就可以使用计算属性。\"></a>不想把v-for放外层，想连着用就可以使用计算属性。</h4><h3 id=\"六-用vnode描述一下DOM结构\"><a href=\"#六-用vnode描述一下DOM结构\" class=\"headerlink\" title=\"六.用vnode描述一下DOM结构\"></a><em>六.用vnode描述一下DOM结构</em></h3><h4 id=\"会将template-gt-ast树-gt-codegen-gt-render函数-gt-内部调用的就是-c方法-gt-虚拟dom\"><a href=\"#会将template-gt-ast树-gt-codegen-gt-render函数-gt-内部调用的就是-c方法-gt-虚拟dom\" class=\"headerlink\" title=\"会将template =&gt; ast树 =&gt; codegen =&gt; render函数 =&gt; 内部调用的就是_c方法 =&gt; 虚拟dom\"></a>会将template =&gt; ast树 =&gt; codegen =&gt; render函数 =&gt; 内部调用的就是_c方法 =&gt; 虚拟dom</h4><h4 id=\"总结：将template模板转化成虚拟dom。\"><a href=\"#总结：将template模板转化成虚拟dom。\" class=\"headerlink\" title=\"总结：将template模板转化成虚拟dom。\"></a>总结：将template模板转化成虚拟dom。</h4><h3 id=\"七-组件中的data为什么是一个函数？\"><a href=\"#七-组件中的data为什么是一个函数？\" class=\"headerlink\" title=\"七.组件中的data为什么是一个函数？\"></a><em>七.组件中的data为什么是一个函数？</em></h3><h4 id=\"1-同一个组件被复用多次，会创建多个实例。\"><a href=\"#1-同一个组件被复用多次，会创建多个实例。\" class=\"headerlink\" title=\"1.同一个组件被复用多次，会创建多个实例。\"></a>1.同一个组件被复用多次，会创建多个实例。</h4><h4 id=\"2-这些实例用的是同一个构造函数，如果data是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过data函数返回一个对象作为组件的状态。\"><a href=\"#2-这些实例用的是同一个构造函数，如果data是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过data函数返回一个对象作为组件的状态。\" class=\"headerlink\" title=\"2.这些实例用的是同一个构造函数，如果data是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过data函数返回一个对象作为组件的状态。\"></a>2.这些实例用的是同一个构造函数，如果data是一个对象的话。那么所有组件都共享了同一个对象。为了保证组件的数据独立性要求每个组件必须通过data函数返回一个对象作为组件的状态。</h4><h3 id=\"八-Vue中v-html会有哪些问题？\"><a href=\"#八-Vue中v-html会有哪些问题？\" class=\"headerlink\" title=\"八.Vue中v-html会有哪些问题？\"></a><em>八.Vue中v-html会有哪些问题？</em></h3><h4 id=\"1-可能会导致xss攻击。\"><a href=\"#1-可能会导致xss攻击。\" class=\"headerlink\" title=\"1.可能会导致xss攻击。\"></a>1.可能会导致xss攻击。</h4><h4 id=\"2-v-html会替换掉标签内子元素。\"><a href=\"#2-v-html会替换掉标签内子元素。\" class=\"headerlink\" title=\"2.v-html会替换掉标签内子元素。\"></a>2.v-html会替换掉标签内子元素。</h4><h3 id><a href=\"#\" class=\"headerlink\" title=\"**\"></a>**</h3><p>#### </p>\n<!-- ## Quick Start\n\n### Create a new post\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a> –&gt;</p>\n-->","tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"},{"name":"Vue面试题","slug":"Vue面试题","permalink":"http://yoursite.com/tags/Vue面试题/"},{"name":"自我总结","slug":"自我总结","permalink":"http://yoursite.com/tags/自我总结/"}]}]